// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.9;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
contract Ballot 
{
    
    
    address[] permMembers;
    uint256 numOfMembers;
    uint numOfItemsEver = 0;
    string[] storedMessages;
    AuctionItems[] public forSale;
    
    constructor()
    {
        numOfMembers = 0;
    }
    
    struct AuctionItems
    {
        IERC721 nft;
        uint nftId;
        string itemName;
        uint256 auctionPrice;
        uint auctionTime;
        uint auctionID;
        address highestBidder;
        uint highestBid;
    }
    
    
    
    function sell(IERC721 link, uint _nftID, string memory name, uint256 price, uint duration) public returns(uint)
    {
        numOfItemsEver++;
        forSale.push(AuctionItems(link, _nftID, name, price, ((block.timestamp + duration)), numOfItemsEver, msg.sender, 0));
        return numOfItemsEver;
    }
    
    function someoneTookADub() external payable
    {
          if (isAuctionOver == true)
          {
              
          }
    }
    
    function addMember(address newUser) public returns (string memory)
    {
        for(uint i = 0; i < permMembers.length; i++)
        {
           if(permMembers[i] == newUser)
           {
               return "This person is already a member";
           }
        }
        permMembers.push(newUser);
        return "Member has been added";
    }
    
    function isAuctionOver(AuctionItems memory over) internal view
    {
        over.auctionTime-block.timestamp <= 0 ?  true :  false;
    }
    
    function chat(string memory message) public returns (string memory)
    {
        storedMessages.push(message);
        return "Chat Recorded";
    }
    
    function checkBalance(address user) public view returns (uint256)
    {
        return user.balance;
    }
    
    function bid(uint amountBid, uint itemId) public returns(string memory)
    {
       if(forSale[itemId-1].auctionTime-block.timestamp <= 0)
       {
           return "Auction has ended";
       }
       if(amountBid < forSale[itemId-1].highestBid)
       {
           return "Bid is too low!";
       }
       if(msg.sender.balance > amountBid)
       {
           forSale[itemId-1].highestBid = amountBid;
           forSale[itemId-1].highestBidder = msg.sender;
           return "You are now the highest bidder";
       }
       return "You Nonce";
    }
}
